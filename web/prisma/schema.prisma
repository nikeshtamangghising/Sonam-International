// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User-related models
model User {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  password_hash String
  first_name    String
  last_name     String
  phone         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  last_login    DateTime?
  status        UserStatus @default(active)
  role          UserRole   @default(customer)
  preferences   Json?      @db.JsonB

  // Relations
  profile       UserProfile?
  addresses     Address[]
  orders        Order[]
  wishlists     Wishlist[]
  reviews       Review[]
  inventory_transactions InventoryTransaction[]
  carts         Cart[]

  @@map("users")
}

enum UserStatus {
  active
  inactive
  suspended
}

enum UserRole {
  customer
  admin
  staff
}

model UserProfile {
  id                String    @id @default(uuid()) @db.Uuid
  user_id           String    @unique @db.Uuid
  profile_picture   String?
  date_of_birth     DateTime? @db.Date
  gender            String?
  bio               String?
  preferences       Json?     @db.JsonB
  marketing_consent Boolean   @default(false)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Address {
  id            String      @id @default(uuid()) @db.Uuid
  user_id       String      @db.Uuid
  address_type  AddressType
  is_default    Boolean     @default(false)
  first_name    String
  last_name     String
  company       String?
  address_line1 String
  address_line2 String?
  city          String
  state         String
  postal_code   String
  country       String
  phone         String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shipping_orders Order[]   @relation("shipping_address")
  billing_orders  Order[]   @relation("billing_address")

  @@map("addresses")
}

enum AddressType {
  shipping
  billing
}

// Product-related models
model Category {
  id               String     @id @default(uuid()) @db.Uuid
  parent_id        String?    @db.Uuid
  name             String
  slug             String     @unique
  description      String?
  image_url        String?
  is_active        Boolean    @default(true)
  meta_title       String?
  meta_description String?
  sort_order       Int        @default(0)
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  // Relations
  parent           Category?  @relation("CategoryToCategory", fields: [parent_id], references: [id], onDelete: SetNull)
  children         Category[] @relation("CategoryToCategory")
  products         ProductCategory[]

  @@map("categories")
}

model Product {
  id                String    @id @default(uuid()) @db.Uuid
  sku               String    @unique
  name              String
  slug              String    @unique
  brand_id          String    @db.Uuid
  description_short String?
  description_long  String?
  price             Decimal   @db.Decimal(10, 2)
  sale_price        Decimal?  @db.Decimal(10, 2)
  cost_price        Decimal   @db.Decimal(10, 2)
  is_active         Boolean   @default(true)
  is_featured       Boolean   @default(false)
  tax_category_id   String    @db.Uuid
  weight            Decimal   @db.Decimal(10, 2)
  dimensions        Json?     @db.JsonB
  meta_title        String?
  meta_description  String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  brand             Brand     @relation(fields: [brand_id], references: [id])
  tax_category      TaxCategory @relation(fields: [tax_category_id], references: [id])
  categories        ProductCategory[]
  variants          ProductVariant[]
  images            ProductImage[]
  reviews           Review[]
  order_items       OrderItem[]
  cart_items        CartItem[]
  wishlist_items    WishlistItem[]
  inventory         Inventory[]

  @@map("products")
}

model ProductCategory {
  product_id   String   @db.Uuid
  category_id  String   @db.Uuid
  is_primary   Boolean  @default(false)
  created_at   DateTime @default(now())

  // Relations
  product      Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category     Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([product_id, category_id])
  @@map("product_categories")
}

model ProductVariant {
  id                 String    @id @default(uuid()) @db.Uuid
  product_id         String    @db.Uuid
  sku                String    @unique
  name               String
  price_adjustment   Decimal   @default(0) @db.Decimal(10, 2)
  stock_quantity     Int       @default(0)
  low_stock_threshold Int      @default(5)
  is_active          Boolean   @default(true)
  weight_adjustment  Decimal   @default(0) @db.Decimal(10, 2)
  dimensions         Json?     @db.JsonB
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  // Relations
  product            Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  attributes         VariantAttribute[]
  images             ProductImage[]
  order_items        OrderItem[]
  cart_items         CartItem[]
  wishlist_items     WishlistItem[]
  inventory          Inventory[]

  @@map("product_variants")
}

model VariantAttribute {
  id           String    @id @default(uuid()) @db.Uuid
  variant_id   String    @db.Uuid
  attribute_id String    @db.Uuid
  value        String
  created_at   DateTime  @default(now())

  // Relations
  variant      ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  attribute    Attribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)

  @@map("variant_attributes")
}

model Attribute {
  id           String    @id @default(uuid()) @db.Uuid
  name         String
  display_name String
  type         String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  values       AttributeValue[]
  variant_attributes VariantAttribute[]

  @@map("attributes")
}

model AttributeValue {
  id           String    @id @default(uuid()) @db.Uuid
  attribute_id String    @db.Uuid
  value        String
  display_value String
  metadata     Json?     @db.JsonB
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  attribute    Attribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)

  @@map("attribute_values")
}

model ProductImage {
  id           String    @id @default(uuid()) @db.Uuid
  product_id   String    @db.Uuid
  variant_id   String?   @db.Uuid
  url          String
  alt_text     String?
  is_primary   Boolean   @default(false)
  sort_order   Int       @default(0)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  product      Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant      ProductVariant? @relation(fields: [variant_id], references: [id], onDelete: SetNull)

  @@map("product_images")
}

model Brand {
  id           String    @id @default(uuid()) @db.Uuid
  name         String
  slug         String    @unique
  description  String?
  logo_url     String?
  website      String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  products     Product[]

  @@map("brands")
}

// Order-related models
model Order {
  id                 String       @id @default(uuid()) @db.Uuid
  user_id            String?      @db.Uuid
  order_number       String       @unique
  status             OrderStatus  @default(pending)
  total_amount       Decimal      @db.Decimal(10, 2)
  subtotal           Decimal      @db.Decimal(10, 2)
  tax_amount         Decimal      @db.Decimal(10, 2)
  shipping_amount    Decimal      @db.Decimal(10, 2)
  discount_amount    Decimal      @db.Decimal(10, 2)
  shipping_address_id String      @db.Uuid
  billing_address_id String       @db.Uuid
  payment_method     String
  payment_status     PaymentStatus @default(pending)
  shipping_method    String
  tracking_number    String?
  notes              String?
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt

  // Relations
  user               User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)
  shipping_address   Address      @relation("shipping_address", fields: [shipping_address_id], references: [id])
  billing_address    Address      @relation("billing_address", fields: [billing_address_id], references: [id])
  items              OrderItem[]
  inventory_transactions InventoryTransaction[]

  @@map("orders")
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

model OrderItem {
  id              String    @id @default(uuid()) @db.Uuid
  order_id        String    @db.Uuid
  product_id      String    @db.Uuid
  variant_id      String?   @db.Uuid
  quantity        Int
  unit_price      Decimal   @db.Decimal(10, 2)
  subtotal        Decimal   @db.Decimal(10, 2)
  tax_amount      Decimal   @db.Decimal(10, 2)
  discount_amount Decimal   @db.Decimal(10, 2)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  order           Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [product_id], references: [id])
  variant         ProductVariant? @relation(fields: [variant_id], references: [id])

  @@map("order_items")
}

// Cart-related models
model Cart {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String?   @db.Uuid
  session_id String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  expires_at DateTime

  // Relations
  user       User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  items      CartItem[]

  @@map("carts")
}

model CartItem {
  id         String    @id @default(uuid()) @db.Uuid
  cart_id    String    @db.Uuid
  product_id String    @db.Uuid
  variant_id String?   @db.Uuid
  quantity   Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  cart       Cart      @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [product_id], references: [id])
  variant    ProductVariant? @relation(fields: [variant_id], references: [id])

  @@map("cart_items")
}

// Wishlist-related models
model Wishlist {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  name       String
  is_public  Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  id          String    @id @default(uuid()) @db.Uuid
  wishlist_id String    @db.Uuid
  product_id  String    @db.Uuid
  variant_id  String?   @db.Uuid
  created_at  DateTime  @default(now())

  // Relations
  wishlist    Wishlist  @relation(fields: [wishlist_id], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [product_id], references: [id])
  variant     ProductVariant? @relation(fields: [variant_id], references: [id])

  @@map("wishlist_items")
}

// Review-related models
model Review {
  id                  String    @id @default(uuid()) @db.Uuid
  product_id          String    @db.Uuid
  user_id             String    @db.Uuid
  rating              Int
  title               String
  content             String
  is_verified_purchase Boolean   @default(false)
  status              ReviewStatus @default(pending)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  // Relations
  product             Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum ReviewStatus {
  pending
  approved
  rejected
}

// Discount-related models
model Discount {
  id                  String        @id @default(uuid()) @db.Uuid
  code                String        @unique
  description         String?
  discount_type       DiscountType
  discount_value      Decimal       @db.Decimal(10, 2)
  minimum_order_amount Decimal      @default(0) @db.Decimal(10, 2)
  is_active           Boolean       @default(true)
  starts_at           DateTime
  ends_at             DateTime
  usage_limit         Int?
  usage_count         Int           @default(0)
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt

  @@map("discounts")
}

enum DiscountType {
  percentage
  fixed_amount
  free_shipping
}

// Tax-related models
model TaxCategory {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  rate       Decimal   @db.Decimal(5, 2)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  products   Product[]

  @@map("tax_categories")
}

// Inventory-related models
model Inventory {
  id                String    @id @default(uuid()) @db.Uuid
  product_id        String?   @db.Uuid
  variant_id        String?   @db.Uuid
  quantity          Int       @default(0)
  reserved_quantity Int       @default(0)
  location          String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  product           Product?  @relation(fields: [product_id], references: [id])
  variant           ProductVariant? @relation(fields: [variant_id], references: [id])
  transactions      InventoryTransaction[]

  @@map("inventory")
}

model InventoryTransaction {
  id               String        @id @default(uuid()) @db.Uuid
  inventory_id     String        @db.Uuid
  order_id         String?       @db.Uuid
  transaction_type TransactionType
  quantity         Int
  notes            String?
  created_at       DateTime      @default(now())
  created_by       String        @db.Uuid

  // Relations
  inventory        Inventory     @relation(fields: [inventory_id], references: [id], onDelete: Cascade)
  order            Order?        @relation(fields: [order_id], references: [id])
  user             User          @relation(fields: [created_by], references: [id])

  @@map("inventory_transactions")
}

enum TransactionType {
  stock_in
  stock_out
  adjustment
  reservation
}

// Content-related models
model ContentPage {
  id               String    @id @default(uuid()) @db.Uuid
  title            String
  slug             String    @unique
  content          String
  meta_title       String?
  meta_description String?
  is_active        Boolean   @default(true)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  @@map("content_pages")
}

model NavigationMenu {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  location   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  items      NavigationItem[]

  @@map("navigation_menus")
}

model NavigationItem {
  id         String    @id @default(uuid()) @db.Uuid
  menu_id    String    @db.Uuid
  parent_id  String?   @db.Uuid
  title      String
  url        String
  target     String    @default("_self")
  sort_order Int       @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  menu       NavigationMenu @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  parent     NavigationItem? @relation("NavigationItemToNavigationItem", fields: [parent_id], references: [id], onDelete: SetNull)
  children   NavigationItem[] @relation("NavigationItemToNavigationItem")

  @@map("navigation_items")
}